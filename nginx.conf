# 1. Define an "upstream" block for your Python app.
# Nginx will call this 'my_app'
upstream my_app {
    # Nginx will forward requests to your Python server,
    # which is running on port 8000.
    server 127.0.0.1:8000;
}

# 2. Define the main server for handling public traffic.
server {
    # We'll set this up to listen on port 80 (HTTP) for now.
    # In a real setup, this would be port 443 (HTTPS).
    listen 80;
    server_name your_domain.com; # Your public domain

    # Define the root directory for your static files
    root /path/to/your/project/www;

    # 3. Handle Static Files (The "Fast Path")
    # This location block tries to find files like /style.css
    # or /form.html directly from the 'www' root.
    location / {
        # Tries to find the file as requested ($uri).
        # If it can't find it, it passes the request to
        # our Python app (@app_fallback).
        try_files $uri @app_fallback;
    }

    # 4. Handle Uploads (Another Static Path)
    # This location handles requests for /uploads/image.png
    location /uploads/ {
        # This tells Nginx to look in the 'uploads' folder
        root /path/to/your/project;
    }

    # 5. Handle Dynamic App Logic (The "Slow Path")
    # This is the fallback location. If a file isn't found
    # (like for '/', '/profile/alice', or '/submit'),
    # Nginx sends the request to your Python app.
    location @app_fallback {
        # Send the request to the 'my_app' upstream we defined
        proxy_pass http://my_app;
        
        # These headers are essential for your app to know
        # who the *real* user is (not Nginx).
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}